{"version":3,"sources":["components/TableRow.js","components/Searchbar.js","components/Table.js","components/Pagination.js","components/App.js","helpers/urls.js","index.js"],"names":["TableRow","props","user","deleteUser","changeUserDetail","selectedUsers","setSelectedUsers","useState","editingMode","setEditingMode","name","setName","email","setEmail","role","setRole","setEditModeFalse","type","onClick","includes","id","index","indexOf","splice","push","value","onChange","e","target","className","src","alt","Searchbar","users","setUsers","setPaginatedUsers","currentPage","placeholder","newValue","toLowerCase","filteredUsers","filter","_","slice","take","length","alert","Table","paginatedUsers","filteredArray","filteredArray2","filteredArr","ids","newName","newEmail","newRole","findIndex","map","Pagination","pages","pagination","setSelectedUsersAsNone","page","App","setCurrentPage","useEffect","fetch","then","res","json","data","pageCount","Math","ceil","range","pageNo","startIndex","paginatedUser","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8f0efb9e.chunk.js","sourcesContent":["import { useState } from 'react';\r\n\r\nfunction TableRow(props){\r\n\r\n    const {\r\n            user,\r\n            deleteUser,\r\n            changeUserDetail,\r\n            selectedUsers,\r\n            setSelectedUsers } = props;\r\n\r\n    //local states\r\n    const [editingMode,setEditingMode]=useState(false);\r\n    const [name,setName]=useState(user.name);\r\n    const [email,setEmail]=useState(user.email);\r\n    const [role,setRole]=useState(user.role);\r\n\r\n    //function to handle to change in name\r\n    const handleNameChange=(e)=>{\r\n        setName(e.target.value);\r\n    }\r\n\r\n    //function to handle to change in email\r\n    const handleEmailChange=(e)=>{\r\n        setEmail(e.target.value);\r\n    }\r\n\r\n    //function to handle to change in role\r\n    const handleRoleChnage=(e)=>{\r\n        setRole(e.target.value);\r\n    }\r\n\r\n    //setting edit mode to true\r\n    const setEditModeTrue=()=>{\r\n        setEditingMode(true);\r\n    }\r\n\r\n    //setting edit mode to false\r\n    const setEditModeFalse=()=>{\r\n        setEditingMode(false);\r\n    }\r\n\r\n    //clicking on checkbox add particular user id if the user is not present in selectedUser Array or remove particular user id from selectedUser array if the user is already present in the array.\r\n    const addRow=()=>{\r\n        if(selectedUsers.includes(user.id)){\r\n            const index=selectedUsers.indexOf(user.id);\r\n            selectedUsers.splice(index, 1);\r\n            setSelectedUsers(selectedUsers);\r\n            return;\r\n        }\r\n        selectedUsers.push(user.id);\r\n        setSelectedUsers(selectedUsers);\r\n    }\r\n    \r\n    return(\r\n        <tr >\r\n            <td ><input type=\"checkbox\" onClick={addRow}/></td>\r\n            <td>{editingMode ? <input value={name} onChange={handleNameChange}/>:user.name }</td>\r\n            <td>{editingMode ? <input value={email} onChange={handleEmailChange} />:user.email}</td>\r\n            <td>{editingMode ? <input value={role} onChange={handleRoleChnage}/>:user.role}</td>\r\n            <td>\r\n                {editingMode ?\r\n                 <div className=\"f_se\">\r\n                    <div>\r\n                        <img  src=\"https://as1.ftcdn.net/v2/jpg/01/11/74/62/500_F_111746297_CVI90GwcVOhmYlMsNBxEWlmzUGvC0l33.jpg\" onClick={()=> { changeUserDetail(user.id,name,email,role); setEditModeFalse(); }}alt=\"save\"/>\r\n                    </div>\r\n                    <div>\r\n                        <img src=\"https://as2.ftcdn.net/v2/jpg/01/80/70/79/500_F_180707917_IpgHK4fttaqN05pbBqNsXNlXY5az9VIH.jpg\" onClick={()=>setEditModeFalse()} alt= \"cancel\"/>\r\n                    </div>                   \r\n                </div> \r\n                : \r\n                <div className=\"f_se\">\r\n                    <div>\r\n                        <img src=\"https://as1.ftcdn.net/v2/jpg/02/76/19/96/500_F_276199650_Hs5K3QnXm9ZMBLd3DT44YcdWUIf8GHxO.jpg\" onClick={()=>deleteUser(user.id)} alt=\"delete\" />\r\n                    </div>\r\n                    <div>\r\n                        <img src=\"https://cdn-icons-png.flaticon.com/512/3597/3597075.png\" onClick={()=>setEditModeTrue()} alt=\"edit\" />\r\n                    </div>            \r\n                </div>\r\n                }\r\n            </td>\r\n    </tr>\r\n    )\r\n}\r\n\r\nexport default TableRow;","import _ from \"lodash\";\r\n\r\n//users shown in one page.\r\nconst pageSize=10;\r\n\r\nfunction Searchbar(props){\r\n\r\n    const { \r\n            users,\r\n            setUsers,\r\n            setPaginatedUsers,\r\n            selectedUsers,\r\n            setSelectedUsers,\r\n            currentPage } = props;\r\n    \r\n    //filtering users and setting users and paginated users on the basis of text entered in search bar \r\n    const filterUser= (e) =>{\r\n        const newValue=e.target.value.toLowerCase();\r\n        const filteredUsers=users.filter((user)=>{\r\n            return user.name\r\n                .toLowerCase()\r\n                .includes(newValue) || user.email\r\n                .toLowerCase()\r\n                .includes(newValue) || user.role\r\n                .toLowerCase()\r\n                .includes(newValue)\r\n        });\r\n        setPaginatedUsers(_(filteredUsers).slice(0).take(pageSize).value());\r\n    }\r\n\r\n    //clicking on deleteSelected button deletes all the users whose id's are present in selectedUser array.\r\n    const deleteSelectedUser=()=>{\r\n        if(selectedUsers.length===0){\r\n            alert(\"Please Select Users To Delete\");\r\n            return;\r\n        }\r\n        const filteredUsers= users.filter(user=>{\r\n            if(!selectedUsers.includes(user.id)){\r\n                return true;\r\n            }else{\r\n                return false;\r\n            }\r\n        })\r\n        setSelectedUsers([]);\r\n        setUsers(filteredUsers);\r\n        setPaginatedUsers(_(filteredUsers).slice((currentPage-1)*10).take(pageSize).value());\r\n    }\r\n\r\n    return(\r\n        <div id=\"searchbarContainer\">\r\n             <div id=\"searchbar\">\r\n                 <input  placeholder=\"Search by name or email or role\" onChange={filterUser}/>\r\n             </div>\r\n             <div>\r\n                <button type=\"button\" className=\"btn btn-danger\" onClick={deleteSelectedUser}>Delete Selected</button>\r\n             </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Searchbar;","import TableRow from './TableRow';\r\nimport Searchbar from './Searchbar';\r\n\r\n\r\nfunction Table(props){\r\n    \r\n\r\n    const {\r\n            users,\r\n            setUsers,\r\n            paginatedUsers,\r\n            setPaginatedUsers,\r\n            selectedUsers,\r\n            setSelectedUsers,\r\n            currentPage } = props;\r\n    \r\n    //implimenting deletion of user:-removing the deleted user from paginatedUsers and all Users and if users are present in selectedUsers then removing from there also.\r\n    const deleteUser=(id)=>{\r\n        const filteredArray=paginatedUsers.filter(user=>user.id !== id);\r\n        const filteredArray2=users.filter(user=>user.id !== id);\r\n        const filteredArr=selectedUsers.filter(ids=>ids !== id);\r\n        setSelectedUsers(filteredArr);\r\n        setUsers(filteredArray2);\r\n        setPaginatedUsers(filteredArray);\r\n    }\r\n\r\n    //chnaging user details like name,email,role.\r\n    const changeUserDetail=(id,newName,newEmail,newRole)=>{\r\n        if(newName.length===0 || newEmail.length===0 || newRole.length===0){\r\n            alert(\"Please Enter Valid Details\");\r\n            return;\r\n        }\r\n        const index=users.findIndex(user=>user.id===id);\r\n        users[index].name=newName;\r\n        users[index].email=newEmail;\r\n        users[index].role=newRole;\r\n        setUsers(users);\r\n    }\r\n\r\n    \r\n    return(\r\n        <div id=\"main\">\r\n            <Searchbar  \r\n                setPaginatedUsers={setPaginatedUsers} \r\n                users={users} \r\n                setUsers={setUsers} \r\n                selectedUsers={selectedUsers} \r\n                setSelectedUsers={setSelectedUsers}\r\n                currentPage={currentPage}\r\n            />\r\n\r\n            <table className=\"table table-striped table-hover\" >\r\n                <thead className=\"table-dark\" >\r\n                    <tr>\r\n                        <th> <input type=\"checkbox\" /></th>\r\n                        <th>Name</th>\r\n                        <th>Email</th>\r\n                        <th>Role</th>\r\n                        <th>Actions</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    { paginatedUsers.map((user)=>{\r\n                        return(\r\n                           < TableRow \r\n                                user={user} \r\n                                deleteUser={deleteUser} \r\n                                changeUserDetail={changeUserDetail}\r\n                                key={user.id} \r\n                                selectedUsers={selectedUsers} \r\n                                setSelectedUsers={setSelectedUsers}\r\n                           />\r\n                        )\r\n                    })}\r\n               </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Table;","\r\n\r\nfunction Pagination(props){\r\n\r\n    const {pages,currentPage,pagination,setSelectedUsers}=props;\r\n\r\n    //changing page removes all the Users id from selectesdUsers array\r\n    const setSelectedUsersAsNone=()=>{\r\n        setSelectedUsers([]);\r\n    }\r\n   \r\n\r\n    return(\r\n        <nav className=\"d-flex justify-content-center\">\r\n            <ul className=\"pagination\">\r\n                        {\r\n                            pages.map((page,index)=>{\r\n                                return <li onClick={setSelectedUsersAsNone} key={index}className={\r\n                                    page===currentPage ? \"page-item active\" : \"page-item\"\r\n                                }\r\n                                > \r\n                                <p className=\"page-link\" onClick={()=>pagination(page)}>\r\n                                    {page}\r\n                                </p>\r\n\r\n                                </li>\r\n                            })\r\n                        }                  \r\n            </ul>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Pagination;","import { useState,useEffect } from \"react\";\nimport _ from \"lodash\";\n\nimport Table from \"./Table\";\nimport { api } from '../helpers/urls'\nimport Pagination from './Pagination';\n\n//users shown in one page\nconst pageSize=10;\n\nfunction App() {\n\n  //local states\n  const [users,setUsers]=useState([]);\n  const [paginatedUsers,setPaginatedUsers]=useState([]); \n  const [currentPage,setCurrentPage]=useState(1);\n\n  //local state for all the selected users through checkbox.\n  const [selectedUsers,setSelectedUsers]=useState([]);\n\n  //fetching users from api and setting it in local states when component is mounted\n  useEffect(()=>{\n    fetch(api)\n    .then((res)=>res.json())\n    .then((data)=>{\n        setUsers(data);\n        setPaginatedUsers(_(data).slice(0).take(pageSize).value())\n    })\n  },[])\n\n  //no of pages required on the basis of numbers of users\n  const pageCount= users ? Math.ceil(users.length/pageSize) : 0 ; \n  const pages= _.range(1,pageCount+1);\n\n  //setting paginated user acording to the page number\n  const pagination=(pageNo)=>{\n      setCurrentPage(pageNo);\n      const startIndex=(pageNo-1) * pageSize ;\n      const paginatedUser= _(users).slice(startIndex).take(pageSize).value();\n      setPaginatedUsers(paginatedUser);\n  }\n\n  return (\n   <div>\n\n      <Table \n        users={users} \n        setUsers={setUsers} \n        paginatedUsers={paginatedUsers} \n        setPaginatedUsers={setPaginatedUsers} \n        selectedUsers={selectedUsers}\n        setSelectedUsers={setSelectedUsers}\n        currentPage={currentPage}\n      />\n\n      <Pagination \n        pages={pages} \n        currentPage={currentPage} \n        pagination={pagination}\n        setSelectedUsers={setSelectedUsers}\n      />\n      \n   </div>\n  );\n}\n\nexport default App;\n","//api provided by geektrust\r\nexport const api=\"https://geektrust.s3-ap-southeast-1.amazonaws.com/adminui-problem/members.json\";","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './stylesheets/index.css';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport App from './components/App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}